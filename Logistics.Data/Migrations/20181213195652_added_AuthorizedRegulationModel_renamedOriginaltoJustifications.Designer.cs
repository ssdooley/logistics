// <auto-generated />
using System;
using Logistics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Logistics.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20181213195652_added_AuthorizedRegulationModel_renamedOriginaltoJustifications")]
    partial class added_AuthorizedRegulationModel_renamedOriginaltoJustifications
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Logistics.Data.ApprovalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCommander");

                    b.Property<bool>("IsLocal");

                    b.Property<string>("Label");

                    b.HasKey("Id");

                    b.ToTable("ApprovalGroup");
                });

            modelBuilder.Entity("Logistics.Data.ApprovalTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("SiteId");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("ApprovalTemplate");
                });

            modelBuilder.Entity("Logistics.Data.ApprovalTemplateGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalGroupId");

                    b.Property<int>("ApprovalTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalGroupId");

                    b.HasIndex("ApprovalTemplateId");

                    b.ToTable("ApprovalTemplateGroup");
                });

            modelBuilder.Entity("Logistics.Data.Approver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalGroupId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Approver");
                });

            modelBuilder.Entity("Logistics.Data.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentType")
                        .IsRequired();

                    b.Property<DateTime>("DateUploaded");

                    b.Property<string>("File");

                    b.Property<string>("Path");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Attachment");

                    b.HasDiscriminator<string>("AttachmentType").HasValue("Base");
                });

            modelBuilder.Entity("Logistics.Data.AuthorizedRegulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AuthorizedRegulation");
                });

            modelBuilder.Entity("Logistics.Data.FundingAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FundingAccount");
                });

            modelBuilder.Entity("Logistics.Data.FundTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("FundingAccountId");

                    b.Property<string>("Label");

                    b.Property<int?>("OrderId");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FundingAccountId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("FundTransaction");
                });

            modelBuilder.Entity("Logistics.Data.FundUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FundingAccountId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FundingAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("FundUser");
                });

            modelBuilder.Entity("Logistics.Data.HandReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Remarks");

                    b.Property<int>("SiteId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("HandReceipt");
                });

            modelBuilder.Entity("Logistics.Data.HandReceiptItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HandReceiptId");

                    b.Property<int>("ItemId");

                    b.Property<int?>("NsnItemId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("HandReceiptId");

                    b.HasIndex("NsnItemId");

                    b.ToTable("HandReceiptItem");
                });

            modelBuilder.Entity("Logistics.Data.HandReceiptVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime?>("DateVerified");

                    b.Property<int>("HandReceiptId");

                    b.Property<int>("LogUserId");

                    b.Property<int?>("RecordUserId");

                    b.Property<string>("Remarks");

                    b.HasKey("Id");

                    b.HasIndex("HandReceiptId");

                    b.HasIndex("LogUserId");

                    b.HasIndex("RecordUserId");

                    b.ToTable("HandReceiptVerification");
                });

            modelBuilder.Entity("Logistics.Data.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateStarted");

                    b.Property<int>("PropertyRecordId");

                    b.Property<string>("Remarks");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PropertyRecordId");

                    b.HasIndex("UserId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Logistics.Data.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InventoryId");

                    b.Property<bool>("IsAccounted");

                    b.Property<bool>("IsMissing");

                    b.Property<int>("ItemId");

                    b.Property<string>("Remarks");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ItemId");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("Logistics.Data.InventoryVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InventoryId");

                    b.Property<string>("Remarks");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("VerificationDate");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("InventoryVerification");
                });

            modelBuilder.Entity("Logistics.Data.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDecommissioned");

                    b.Property<int>("ItemCategoryId");

                    b.Property<string>("ItemType")
                        .IsRequired();

                    b.Property<int>("ManufacturerId");

                    b.Property<string>("Model");

                    b.Property<string>("Nsn");

                    b.Property<int?>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("ItemType").HasValue("Base");
                });

            modelBuilder.Entity("Logistics.Data.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemGroupCategoryId");

                    b.Property<string>("Label");

                    b.HasKey("Id");

                    b.HasIndex("ItemGroupCategoryId");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Logistics.Data.ItemDecommission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DecommissionDate");

                    b.Property<bool>("IsVerified");

                    b.Property<int>("ItemId");

                    b.Property<string>("Remarks");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ItemDecommission");
                });

            modelBuilder.Entity("Logistics.Data.ItemDecommissionVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemDecommissionId");

                    b.Property<string>("Remarks");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("VerificationDate");

                    b.HasKey("Id");

                    b.HasIndex("ItemDecommissionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ItemDecommissionVerification");
                });

            modelBuilder.Entity("Logistics.Data.ItemGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FundingAccountId");

                    b.Property<int>("ItemGroupCategoryId");

                    b.Property<int>("RequestId");

                    b.Property<int>("SiteId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FundingAccountId");

                    b.HasIndex("ItemGroupCategoryId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemGroup");
                });

            modelBuilder.Entity("Logistics.Data.ItemGroupApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalGroupId");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsPostponed");

                    b.Property<bool>("IsRejected");

                    b.Property<int>("ItemGroupId");

                    b.Property<DateTime?>("PostponedUntil");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalGroupId");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemGroupApproval");
                });

            modelBuilder.Entity("Logistics.Data.ItemGroupCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label");

                    b.HasKey("Id");

                    b.ToTable("ItemGroupCategory");
                });

            modelBuilder.Entity("Logistics.Data.ItemReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<DateTime>("ReceiptDate");

                    b.Property<string>("Remarks");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemReceipt");
                });

            modelBuilder.Entity("Logistics.Data.LogUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SiteId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("LogUser");
                });

            modelBuilder.Entity("Logistics.Data.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemCategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("Logistics.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<bool>("IsReceived");

                    b.Property<int>("ItemGroupId");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("Remarks");

                    b.Property<string>("TrackingNumber");

                    b.Property<int>("UserId");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Logistics.Data.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Label");

                    b.HasKey("Id");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("Logistics.Data.PropertyCustodian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PropertyRecordId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PropertyRecordId");

                    b.HasIndex("UserId");

                    b.ToTable("PropertyCustodian");
                });

            modelBuilder.Entity("Logistics.Data.PropertyRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("SiteId");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("PropertyRecord");
                });

            modelBuilder.Entity("Logistics.Data.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorizedRegulationId");

                    b.Property<DateTime>("DateSubmitted");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsComplete");

                    b.Property<bool>("IsRecurring");

                    b.Property<string>("Justifications");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("PriorityId");

                    b.Property<DateTime?>("RenewalDate");

                    b.Property<string>("Requirement");

                    b.Property<int>("SiteId");

                    b.Property<string>("Subject");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizedRegulationId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Logistics.Data.RequestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<int?>("ItemGroupId");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<int>("RequestId");

                    b.HasKey("Id");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestItem");
                });

            modelBuilder.Entity("Logistics.Data.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("Logistics.Data.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DestinationRecordId");

                    b.Property<bool>("IsReceived");

                    b.Property<int>("OriginRecordId");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("TransferDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRecordId");

                    b.HasIndex("OriginRecordId");

                    b.HasIndex("UserId");

                    b.ToTable("Transfer");
                });

            modelBuilder.Entity("Logistics.Data.TransferItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<int>("TransferId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TransferId");

                    b.ToTable("TransferItem");
                });

            modelBuilder.Entity("Logistics.Data.TransferReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ReceiptDate");

                    b.Property<string>("Remarks");

                    b.Property<int>("TransferId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TransferId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("TransferReceipt");
                });

            modelBuilder.Entity("Logistics.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Logistics.Data.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Logistics.Data.OrderAttachment", b =>
                {
                    b.HasBaseType("Logistics.Data.Attachment");

                    b.Property<int>("OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderAttachment");

                    b.HasDiscriminator().HasValue("Order");
                });

            modelBuilder.Entity("Logistics.Data.RequestAttachment", b =>
                {
                    b.HasBaseType("Logistics.Data.Attachment");

                    b.Property<int>("RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestAttachment");

                    b.HasDiscriminator().HasValue("Request");
                });

            modelBuilder.Entity("Logistics.Data.HardwareItem", b =>
                {
                    b.HasBaseType("Logistics.Data.Item");

                    b.Property<string>("Location");

                    b.Property<string>("MacAddress");

                    b.Property<int>("PropertyRecordId");

                    b.Property<string>("ServiceTag");

                    b.HasIndex("PropertyRecordId");

                    b.ToTable("HardwareItem");

                    b.HasDiscriminator().HasValue("Hardware");
                });

            modelBuilder.Entity("Logistics.Data.NsnItem", b =>
                {
                    b.HasBaseType("Logistics.Data.Item");

                    b.Property<int>("Quantity");

                    b.Property<int>("SiteId");

                    b.HasIndex("SiteId");

                    b.ToTable("NsnItem");

                    b.HasDiscriminator().HasValue("NonSerialized");
                });

            modelBuilder.Entity("Logistics.Data.SerializedItem", b =>
                {
                    b.HasBaseType("Logistics.Data.Item");

                    b.Property<string>("Location")
                        .HasColumnName("SerializedItem_Location");

                    b.Property<int>("PropertyRecordId")
                        .HasColumnName("SerializedItem_PropertyRecordId");

                    b.Property<string>("SerialNumber");

                    b.HasIndex("PropertyRecordId");

                    b.ToTable("SerializedItem");

                    b.HasDiscriminator().HasValue("Serialized");
                });

            modelBuilder.Entity("Logistics.Data.SoftwareItem", b =>
                {
                    b.HasBaseType("Logistics.Data.Item");

                    b.Property<string>("License");

                    b.Property<int>("SiteId")
                        .HasColumnName("SoftwareItem_SiteId");

                    b.Property<int>("Users");

                    b.HasIndex("SiteId");

                    b.ToTable("SoftwareItem");

                    b.HasDiscriminator().HasValue("Software");
                });

            modelBuilder.Entity("Logistics.Data.ApprovalTemplate", b =>
                {
                    b.HasOne("Logistics.Data.Site", "Site")
                        .WithMany("ApprovalTemplates")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.ApprovalTemplateGroup", b =>
                {
                    b.HasOne("Logistics.Data.ApprovalGroup", "ApprovalGroup")
                        .WithMany("ApprovalTemplateGroups")
                        .HasForeignKey("ApprovalGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.ApprovalTemplate", "ApprovalTemplate")
                        .WithMany("ApprovalTemplateGroups")
                        .HasForeignKey("ApprovalTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.Approver", b =>
                {
                    b.HasOne("Logistics.Data.ApprovalGroup", "ApprovalGroup")
                        .WithMany("Approvers")
                        .HasForeignKey("ApprovalGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("Approvers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.Attachment", b =>
                {
                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.FundTransaction", b =>
                {
                    b.HasOne("Logistics.Data.FundingAccount", "FundingAccount")
                        .WithMany("FundTransactions")
                        .HasForeignKey("FundingAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Order", "Order")
                        .WithMany("FundTransactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.FundUser", b =>
                {
                    b.HasOne("Logistics.Data.FundingAccount")
                        .WithMany("FundUsers")
                        .HasForeignKey("FundingAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("FundUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.HandReceipt", b =>
                {
                    b.HasOne("Logistics.Data.Site", "Site")
                        .WithMany("HandReceipts")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("HandReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.HandReceiptItem", b =>
                {
                    b.HasOne("Logistics.Data.HandReceipt", "HandReceipt")
                        .WithMany("HandReceiptItems")
                        .HasForeignKey("HandReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.NsnItem", "NsnItem")
                        .WithMany("HandReceiptItems")
                        .HasForeignKey("NsnItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.HandReceiptVerification", b =>
                {
                    b.HasOne("Logistics.Data.HandReceipt", "HandReceipt")
                        .WithMany("HandReceiptVerifications")
                        .HasForeignKey("HandReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "LogUser")
                        .WithMany("LogHandReceiptVerifications")
                        .HasForeignKey("LogUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "RecordUser")
                        .WithMany("RecordHandReceiptVerifications")
                        .HasForeignKey("RecordUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.Inventory", b =>
                {
                    b.HasOne("Logistics.Data.PropertyRecord", "PropertyRecord")
                        .WithMany("Inventories")
                        .HasForeignKey("PropertyRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("Inventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.InventoryItem", b =>
                {
                    b.HasOne("Logistics.Data.Inventory", "Inventory")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Item", "Item")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.InventoryVerification", b =>
                {
                    b.HasOne("Logistics.Data.Inventory", "Inventory")
                        .WithOne("InventoryVerification")
                        .HasForeignKey("Logistics.Data.InventoryVerification", "InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("InventoryVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.Item", b =>
                {
                    b.HasOne("Logistics.Data.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Manufacturer", "Manufacturer")
                        .WithMany("Items")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.ItemCategory", b =>
                {
                    b.HasOne("Logistics.Data.ItemGroupCategory", "ItemGroupCategory")
                        .WithMany("ItemCategories")
                        .HasForeignKey("ItemGroupCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.ItemDecommission", b =>
                {
                    b.HasOne("Logistics.Data.Item", "Item")
                        .WithOne("ItemDecommission")
                        .HasForeignKey("Logistics.Data.ItemDecommission", "ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("ItemDecommissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.ItemDecommissionVerification", b =>
                {
                    b.HasOne("Logistics.Data.ItemDecommission", "ItemDecommission")
                        .WithOne("ItemDecommissionVerification")
                        .HasForeignKey("Logistics.Data.ItemDecommissionVerification", "ItemDecommissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("ItemDecommissionVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.ItemGroup", b =>
                {
                    b.HasOne("Logistics.Data.FundingAccount", "FundingAccount")
                        .WithMany("ItemGroups")
                        .HasForeignKey("FundingAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.ItemGroupCategory", "ItemGroupCategory")
                        .WithMany("ItemGroups")
                        .HasForeignKey("ItemGroupCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Request", "Request")
                        .WithMany("ItemGroups")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Site", "Site")
                        .WithMany("ItemGroups")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("ItemGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.ItemGroupApproval", b =>
                {
                    b.HasOne("Logistics.Data.ApprovalGroup", "ApprovalGroup")
                        .WithMany("ItemGroupApprovals")
                        .HasForeignKey("ApprovalGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.ItemGroup", "ItemGroup")
                        .WithMany("ItemGroupApprovals")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("ItemGroupApprovals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.ItemReceipt", b =>
                {
                    b.HasOne("Logistics.Data.Item", "Item")
                        .WithMany("ItemReceipts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("ItemReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.LogUser", b =>
                {
                    b.HasOne("Logistics.Data.Site", "Site")
                        .WithMany("LogUsers")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("LogUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.Manufacturer", b =>
                {
                    b.HasOne("Logistics.Data.ItemCategory", "ItemCategory")
                        .WithMany("Manufacturers")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.Order", b =>
                {
                    b.HasOne("Logistics.Data.ItemGroup", "ItemGroup")
                        .WithMany("Orders")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Vendor", "Vendor")
                        .WithMany("Orders")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.PropertyCustodian", b =>
                {
                    b.HasOne("Logistics.Data.PropertyRecord", "PropertyRecord")
                        .WithMany("PropertyCustodians")
                        .HasForeignKey("PropertyRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("PropertyCustodians")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.PropertyRecord", b =>
                {
                    b.HasOne("Logistics.Data.Site", "Site")
                        .WithMany("PropertyRecords")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.Request", b =>
                {
                    b.HasOne("Logistics.Data.AuthorizedRegulation", "AuthorizedRegulation")
                        .WithMany("Requests")
                        .HasForeignKey("AuthorizedRegulationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Priority", "Priority")
                        .WithMany("Requests")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Site", "Site")
                        .WithMany("Requests")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.RequestItem", b =>
                {
                    b.HasOne("Logistics.Data.ItemGroup", "ItemGroup")
                        .WithMany("RequestItems")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Request", "Request")
                        .WithMany("RequestItems")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.Transfer", b =>
                {
                    b.HasOne("Logistics.Data.PropertyRecord", "DestinationRecord")
                        .WithMany("DestinationTransfers")
                        .HasForeignKey("DestinationRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.PropertyRecord", "OriginRecord")
                        .WithMany("OriginTransfers")
                        .HasForeignKey("OriginRecordId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("Transfers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.TransferItem", b =>
                {
                    b.HasOne("Logistics.Data.Item", "Item")
                        .WithMany("TransferItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.Transfer", "Transfer")
                        .WithMany("TransferItems")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.TransferReceipt", b =>
                {
                    b.HasOne("Logistics.Data.Transfer", "Transfer")
                        .WithOne("TransferReceipt")
                        .HasForeignKey("Logistics.Data.TransferReceipt", "TransferId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistics.Data.User", "User")
                        .WithMany("TransferReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.OrderAttachment", b =>
                {
                    b.HasOne("Logistics.Data.Order", "Order")
                        .WithMany("OrderAttachments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.RequestAttachment", b =>
                {
                    b.HasOne("Logistics.Data.Request", "Request")
                        .WithMany("RequestAttachments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.HardwareItem", b =>
                {
                    b.HasOne("Logistics.Data.PropertyRecord", "PropertyRecord")
                        .WithMany("HardwareItems")
                        .HasForeignKey("PropertyRecordId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.NsnItem", b =>
                {
                    b.HasOne("Logistics.Data.Site", "Site")
                        .WithMany("NsnItems")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.SerializedItem", b =>
                {
                    b.HasOne("Logistics.Data.PropertyRecord", "PropertyRecord")
                        .WithMany("SerializedItems")
                        .HasForeignKey("PropertyRecordId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Logistics.Data.SoftwareItem", b =>
                {
                    b.HasOne("Logistics.Data.Site", "Site")
                        .WithMany("SoftwareItems")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
